// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
    PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_.success_)*/false
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_ENTER_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_ENTER_GAMEDefaultTypeInternal() {}
        union {
            S_ENTER_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
    PROTOBUF_CONSTEXPR C_ENTER_GAME::C_ENTER_GAME(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_ENTER_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_ENTER_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_ENTER_GAMEDefaultTypeInternal() {}
        union {
            C_ENTER_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
    PROTOBUF_CONSTEXPR S_CREATE_GAME::S_CREATE_GAME(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_.success_)*/false
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_CREATE_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_CREATE_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_CREATE_GAMEDefaultTypeInternal() {}
        union {
            S_CREATE_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CREATE_GAMEDefaultTypeInternal _S_CREATE_GAME_default_instance_;
    PROTOBUF_CONSTEXPR C_CREATE_GAME::C_CREATE_GAME(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_CREATE_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_CREATE_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_CREATE_GAMEDefaultTypeInternal() {}
        union {
            C_CREATE_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATE_GAMEDefaultTypeInternal _C_CREATE_GAME_default_instance_;
    PROTOBUF_CONSTEXPR S_GAME_START::S_GAME_START(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_)*/{}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_GAME_STARTDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_GAME_STARTDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_GAME_STARTDefaultTypeInternal() {}
        union {
            S_GAME_START _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GAME_STARTDefaultTypeInternal _S_GAME_START_default_instance_;
    PROTOBUF_CONSTEXPR C_GAME_START::C_GAME_START(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.host_player_)*/nullptr
          , /*decltype(_impl_.stage_number_)*/0
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_GAME_STARTDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_GAME_STARTDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_GAME_STARTDefaultTypeInternal() {}
        union {
            C_GAME_START _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GAME_STARTDefaultTypeInternal _C_GAME_START_default_instance_;
    PROTOBUF_CONSTEXPR S_LEAVE_GAME::S_LEAVE_GAME(
        ::_pbi::ConstantInitialized) {}
    struct S_LEAVE_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_LEAVE_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_LEAVE_GAMEDefaultTypeInternal() {}
        union {
            S_LEAVE_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
    PROTOBUF_CONSTEXPR C_LEAVE_GAME::C_LEAVE_GAME(
        ::_pbi::ConstantInitialized) {}
    struct C_LEAVE_GAMEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_LEAVE_GAMEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_LEAVE_GAMEDefaultTypeInternal() {}
        union {
            C_LEAVE_GAME _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
    PROTOBUF_CONSTEXPR S_GAME_END::S_GAME_END(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_GAME_ENDDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_GAME_ENDDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_GAME_ENDDefaultTypeInternal() {}
        union {
            S_GAME_END _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GAME_ENDDefaultTypeInternal _S_GAME_END_default_instance_;
    PROTOBUF_CONSTEXPR C_GAME_END::C_GAME_END(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_GAME_ENDDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_GAME_ENDDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_GAME_ENDDefaultTypeInternal() {}
        union {
            C_GAME_END _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GAME_ENDDefaultTypeInternal _C_GAME_END_default_instance_;
    PROTOBUF_CONSTEXPR S_SPAWN::S_SPAWN(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.players_)*/{}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_SPAWNDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_SPAWNDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_SPAWNDefaultTypeInternal() {}
        union {
            S_SPAWN _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
    PROTOBUF_CONSTEXPR C_SPAWN::C_SPAWN(
        ::_pbi::ConstantInitialized) {}
    struct C_SPAWNDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_SPAWNDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_SPAWNDefaultTypeInternal() {}
        union {
            C_SPAWN _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SPAWNDefaultTypeInternal _C_SPAWN_default_instance_;
    PROTOBUF_CONSTEXPR S_DESPAWN::S_DESPAWN(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.object_ids_)*/{}
          , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_DESPAWNDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_DESPAWNDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_DESPAWNDefaultTypeInternal() {}
        union {
            S_DESPAWN _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
    PROTOBUF_CONSTEXPR C_DESPAWN::C_DESPAWN(
        ::_pbi::ConstantInitialized) {}
    struct C_DESPAWNDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_DESPAWNDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_DESPAWNDefaultTypeInternal() {}
        union {
            C_DESPAWN _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DESPAWNDefaultTypeInternal _C_DESPAWN_default_instance_;
    PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_MOVEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_MOVEDefaultTypeInternal() {}
        union {
            S_MOVE _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
    PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_)*/nullptr
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_MOVEDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_MOVEDefaultTypeInternal() {}
        union {
            C_MOVE _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
    PROTOBUF_CONSTEXPR S_PLAYER_ACTION::S_PLAYER_ACTION(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_id_)*/uint64_t{0u}
          , /*decltype(_impl_.object_id_)*/uint64_t{0u}
          , /*decltype(_impl_.action_type_)*/0
          , /*decltype(_impl_.is_right_on_)*/false
          , /*decltype(_impl_.is_open_door_)*/false
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_PLAYER_ACTIONDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_PLAYER_ACTIONDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_PLAYER_ACTIONDefaultTypeInternal() {}
        union {
            S_PLAYER_ACTION _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_ACTIONDefaultTypeInternal _S_PLAYER_ACTION_default_instance_;
    PROTOBUF_CONSTEXPR C_PLAYER_ACTION::C_PLAYER_ACTION(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_id_)*/uint64_t{0u}
          , /*decltype(_impl_.object_id_)*/uint64_t{0u}
          , /*decltype(_impl_.action_type_)*/0
          , /*decltype(_impl_.is_right_on_)*/false
          , /*decltype(_impl_.is_open_door_)*/false
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_PLAYER_ACTIONDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_PLAYER_ACTIONDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_PLAYER_ACTIONDefaultTypeInternal() {}
        union {
            C_PLAYER_ACTION _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_ACTIONDefaultTypeInternal _C_PLAYER_ACTION_default_instance_;
    PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.playerid_)*/uint64_t{0u}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_CHATDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_CHATDefaultTypeInternal() {}
        union {
            S_CHAT _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
    PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_CHATDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_CHATDefaultTypeInternal() {}
        union {
            C_CHAT _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
    PROTOBUF_CONSTEXPR S_PICK_UP_ITEM::S_PICK_UP_ITEM(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_id_)*/uint64_t{0u}
          , /*decltype(_impl_.item_type_)*/0
          , /*decltype(_impl_.is_on_)*/false
          , /*decltype(_impl_.object_id_)*/uint64_t{0u}
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct S_PICK_UP_ITEMDefaultTypeInternal {
        PROTOBUF_CONSTEXPR S_PICK_UP_ITEMDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~S_PICK_UP_ITEMDefaultTypeInternal() {}
        union {
            S_PICK_UP_ITEM _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PICK_UP_ITEMDefaultTypeInternal _S_PICK_UP_ITEM_default_instance_;
    PROTOBUF_CONSTEXPR C_PICK_UP_ITEM::C_PICK_UP_ITEM(
        ::_pbi::ConstantInitialized) : _impl_{
            /*decltype(_impl_.player_id_)*/uint64_t{0u}
          , /*decltype(_impl_.object_id_)*/uint64_t{0u}
          , /*decltype(_impl_.item_type_)*/0
          , /*decltype(_impl_._cached_size_)*/{} } {}
    struct C_PICK_UP_ITEMDefaultTypeInternal {
        PROTOBUF_CONSTEXPR C_PICK_UP_ITEMDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~C_PICK_UP_ITEMDefaultTypeInternal() {}
        union {
            C_PICK_UP_ITEM _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PICK_UP_ITEMDefaultTypeInternal _C_PICK_UP_ITEM_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_GAME, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_GAME, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_GAME, _impl_.room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_GAME, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAME_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAME_START, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAME_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAME_START, _impl_.host_player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAME_START, _impl_.stage_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAME_END, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAME_END, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAME_END, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAME_END, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.is_right_on_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.is_open_door_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.is_right_on_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.is_open_door_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PICK_UP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PICK_UP_ITEM, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PICK_UP_ITEM, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PICK_UP_ITEM, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PICK_UP_ITEM, _impl_.is_on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PICK_UP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PICK_UP_ITEM, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PICK_UP_ITEM, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PICK_UP_ITEM, _impl_.object_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 10, -1, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 18, -1, -1, sizeof(::Protocol::S_CREATE_GAME)},
  { 28, -1, -1, sizeof(::Protocol::C_CREATE_GAME)},
  { 35, -1, -1, sizeof(::Protocol::S_GAME_START)},
  { 42, -1, -1, sizeof(::Protocol::C_GAME_START)},
  { 50, -1, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 56, -1, -1, sizeof(::Protocol::C_LEAVE_GAME)},
  { 62, -1, -1, sizeof(::Protocol::S_GAME_END)},
  { 69, -1, -1, sizeof(::Protocol::C_GAME_END)},
  { 76, -1, -1, sizeof(::Protocol::S_SPAWN)},
  { 83, -1, -1, sizeof(::Protocol::C_SPAWN)},
  { 89, -1, -1, sizeof(::Protocol::S_DESPAWN)},
  { 96, -1, -1, sizeof(::Protocol::C_DESPAWN)},
  { 102, -1, -1, sizeof(::Protocol::S_MOVE)},
  { 109, -1, -1, sizeof(::Protocol::C_MOVE)},
  { 116, -1, -1, sizeof(::Protocol::S_PLAYER_ACTION)},
  { 127, -1, -1, sizeof(::Protocol::C_PLAYER_ACTION)},
  { 138, -1, -1, sizeof(::Protocol::S_CHAT)},
  { 147, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 155, -1, -1, sizeof(::Protocol::S_PICK_UP_ITEM)},
  { 165, -1, -1, sizeof(::Protocol::C_PICK_UP_ITEM)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_C_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_CREATE_GAME_default_instance_._instance,
  &::Protocol::_C_CREATE_GAME_default_instance_._instance,
  &::Protocol::_S_GAME_START_default_instance_._instance,
  &::Protocol::_C_GAME_START_default_instance_._instance,
  &::Protocol::_S_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_C_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_GAME_END_default_instance_._instance,
  &::Protocol::_C_GAME_END_default_instance_._instance,
  &::Protocol::_S_SPAWN_default_instance_._instance,
  &::Protocol::_C_SPAWN_default_instance_._instance,
  &::Protocol::_S_DESPAWN_default_instance_._instance,
  &::Protocol::_C_DESPAWN_default_instance_._instance,
  &::Protocol::_S_MOVE_default_instance_._instance,
  &::Protocol::_C_MOVE_default_instance_._instance,
  &::Protocol::_S_PLAYER_ACTION_default_instance_._instance,
  &::Protocol::_C_PLAYER_ACTION_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_PICK_UP_ITEM_default_instance_._instance,
  &::Protocol::_C_PICK_UP_ITEM_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
"\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
"Struct.proto\"k\n\014S_ENTER_GAME\022\017\n\007success\030"
"\001 \001(\010\022$\n\006player\030\002 \001(\0132\024.Protocol.ObjectI"
"nfo\022\023\n\013player_name\030\003 \001(\t\022\017\n\007room_id\030\004 \001("
"\t\"-\n\014C_ENTER_GAME\022\017\n\007room_id\030\001 \001(\t\022\014\n\004na"
"me\030\002 \001(\t\"l\n\rS_CREATE_GAME\022\017\n\007success\030\001 \001"
"(\010\022$\n\006player\030\002 \001(\0132\024.Protocol.ObjectInfo"
"\022\023\n\013player_name\030\003 \001(\t\022\017\n\007room_id\030\004 \001(\t\"\035"
"\n\rC_CREATE_GAME\022\014\n\004name\030\001 \001(\t\"2\n\014S_GAME_"
"START\022\"\n\006player\030\001 \003(\0132\022.Protocol.MoveInf"
"o\"f\n\014C_GAME_START\022)\n\013host_player\030\001 \001(\0132\024"
".Protocol.ObjectInfo\022+\n\014stage_number\030\002 \001"
"(\0162\025.Protocol.StageNumber\"\016\n\014S_LEAVE_GAM"
"E\"\016\n\014C_LEAVE_GAME\"2\n\nS_GAME_END\022$\n\006playe"
"r\030\001 \001(\0132\024.Protocol.ObjectInfo\"2\n\nC_GAME_"
"END\022$\n\006player\030\001 \001(\0132\024.Protocol.ObjectInf"
"o\"0\n\007S_SPAWN\022%\n\007players\030\001 \003(\0132\024.Protocol"
".ObjectInfo\"\t\n\007C_SPAWN\"\037\n\tS_DESPAWN\022\022\n\no"
"bject_ids\030\001 \003(\004\"\013\n\tC_DESPAWN\".\n\006S_MOVE\022$"
"\n\006player\030\001 \001(\0132\024.Protocol.ObjectInfo\".\n\006"
"C_MOVE\022$\n\006player\030\001 \001(\0132\024.Protocol.Object"
"Info\"\215\001\n\017S_PLAYER_ACTION\022)\n\013action_type\030"
"\001 \001(\0162\024.Protocol.ActionType\022\021\n\tplayer_id"
"\030\002 \001(\004\022\021\n\tobject_id\030\003 \001(\004\022\023\n\013is_right_on"
"\030\004 \001(\010\022\024\n\014is_open_door\030\005 \001(\010\"\215\001\n\017C_PLAYE"
"R_ACTION\022)\n\013action_type\030\001 \001(\0162\024.Protocol"
".ActionType\022\021\n\tplayer_id\030\002 \001(\004\022\021\n\tobject"
"_id\030\003 \001(\004\022\023\n\013is_right_on\030\004 \001(\010\022\024\n\014is_ope"
"n_door\030\005 \001(\010\"5\n\006S_CHAT\022\020\n\010playerId\030\001 \001(\004"
"\022\014\n\004name\030\002 \001(\t\022\013\n\003msg\030\003 \001(\t\"#\n\006C_CHAT\022\013\n"
"\003msg\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"s\n\016S_PICK_UP_IT"
"EM\022,\n\titem_type\030\001 \001(\0162\031.Protocol.Clicked"
"ItemType\022\021\n\tplayer_id\030\002 \001(\004\022\021\n\tobject_id"
"\030\003 \001(\004\022\r\n\005is_on\030\004 \001(\010\"d\n\016C_PICK_UP_ITEM\022"
",\n\titem_type\030\001 \001(\0162\031.Protocol.ClickedIte"
"mType\022\021\n\tplayer_id\030\002 \001(\004\022\021\n\tobject_id\030\003 "
"\001(\004b\006proto3"
;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1451, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 22,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
    return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

    // ===================================================================

    class S_ENTER_GAME::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const S_ENTER_GAME* msg);
    };

    const ::Protocol::ObjectInfo&
        S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
        return *msg->_impl_.player_;
    }
    void S_ENTER_GAME::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
    }
    S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_ENTER_GAME* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_name_){}
          , decltype(_impl_.room_id_){}
          , decltype(_impl_.player_){nullptr}
          , decltype(_impl_.success_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_player_name().empty()) {
            _this->_impl_.player_name_.Set(from._internal_player_name(),
                _this->GetArenaForAllocation());
        }
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_room_id().empty()) {
            _this->_impl_.room_id_.Set(from._internal_room_id(),
                _this->GetArenaForAllocation());
        }
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        _this->_impl_.success_ = from._impl_.success_;
        // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
    }

    inline void S_ENTER_GAME::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_name_){}
          , decltype(_impl_.room_id_){}
          , decltype(_impl_.player_){nullptr}
          , decltype(_impl_.success_){false}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    S_ENTER_GAME::~S_ENTER_GAME() {
        // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_ENTER_GAME::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.player_name_.Destroy();
        _impl_.room_id_.Destroy();
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void S_ENTER_GAME::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_ENTER_GAME::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.player_name_.ClearToEmpty();
        _impl_.room_id_.ClearToEmpty();
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _impl_.success_ = false;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // bool success = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // .Protocol.ObjectInfo player = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // string player_name = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_player_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.player_name"));
                }
                else
                    goto handle_unusual;
                continue;
                // string room_id = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                    auto str = _internal_mutable_room_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.room_id"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_ENTER_GAME::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool success = 1;
        if (this->_internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
        }

        // .Protocol.ObjectInfo player = 2;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        // string player_name = 3;
        if (!this->_internal_player_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_ENTER_GAME.player_name");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_player_name(), target);
        }

        // string room_id = 4;
        if (!this->_internal_room_id().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_ENTER_GAME.room_id");
            target = stream->WriteStringMaybeAliased(
                4, this->_internal_room_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
        return target;
    }

    size_t S_ENTER_GAME::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string player_name = 3;
        if (!this->_internal_player_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_player_name());
        }

        // string room_id = 4;
        if (!this->_internal_room_id().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_room_id());
        }

        // .Protocol.ObjectInfo player = 2;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        // bool success = 1;
        if (this->_internal_success() != 0) {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_ENTER_GAME::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_ENTER_GAME::GetClassData() const { return &_class_data_; }


    void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
        auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_player_name().empty()) {
            _this->_internal_set_player_name(from._internal_player_name());
        }
        if (!from._internal_room_id().empty()) {
            _this->_internal_set_room_id(from._internal_room_id());
        }
        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        if (from._internal_success() != 0) {
            _this->_internal_set_success(from._internal_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_ENTER_GAME::IsInitialized() const {
        return true;
    }

    void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.player_name_, lhs_arena,
            &other->_impl_.player_name_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.room_id_, lhs_arena,
            &other->_impl_.room_id_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.success_)
            + sizeof(S_ENTER_GAME::_impl_.success_)
            - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.player_)>(
                reinterpret_cast<char*>(&_impl_.player_),
                reinterpret_cast<char*>(&other->_impl_.player_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[0]);
    }

    // ===================================================================

    class C_ENTER_GAME::_Internal {
    public:
    };

    C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
    }
    C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_ENTER_GAME* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.room_id_){}
          , decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_room_id().empty()) {
            _this->_impl_.room_id_.Set(from._internal_room_id(),
                _this->GetArenaForAllocation());
        }
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty()) {
            _this->_impl_.name_.Set(from._internal_name(),
                _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
    }

    inline void C_ENTER_GAME::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.room_id_){}
          , decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    C_ENTER_GAME::~C_ENTER_GAME() {
        // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_ENTER_GAME::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.room_id_.Destroy();
        _impl_.name_.Destroy();
    }

    void C_ENTER_GAME::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_ENTER_GAME::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.room_id_.ClearToEmpty();
        _impl_.name_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // string room_id = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    auto str = _internal_mutable_room_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER_GAME.room_id"));
                }
                else
                    goto handle_unusual;
                continue;
                // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER_GAME.name"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_ENTER_GAME::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string room_id = 1;
        if (!this->_internal_room_id().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.C_ENTER_GAME.room_id");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_room_id(), target);
        }

        // string name = 2;
        if (!this->_internal_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.C_ENTER_GAME.name");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_name(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
        return target;
    }

    size_t C_ENTER_GAME::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string room_id = 1;
        if (!this->_internal_room_id().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_room_id());
        }

        // string name = 2;
        if (!this->_internal_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_name());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_ENTER_GAME::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_ENTER_GAME::GetClassData() const { return &_class_data_; }


    void C_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_ENTER_GAME*>(&to_msg);
        auto& from = static_cast<const C_ENTER_GAME&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_room_id().empty()) {
            _this->_internal_set_room_id(from._internal_room_id());
        }
        if (!from._internal_name().empty()) {
            _this->_internal_set_name(from._internal_name());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_ENTER_GAME::IsInitialized() const {
        return true;
    }

    void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.room_id_, lhs_arena,
            &other->_impl_.room_id_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[1]);
    }

    // ===================================================================

    class S_CREATE_GAME::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const S_CREATE_GAME* msg);
    };

    const ::Protocol::ObjectInfo&
        S_CREATE_GAME::_Internal::player(const S_CREATE_GAME* msg) {
        return *msg->_impl_.player_;
    }
    void S_CREATE_GAME::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    S_CREATE_GAME::S_CREATE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_GAME)
    }
    S_CREATE_GAME::S_CREATE_GAME(const S_CREATE_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_CREATE_GAME* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_name_){}
          , decltype(_impl_.room_id_){}
          , decltype(_impl_.player_){nullptr}
          , decltype(_impl_.success_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_player_name().empty()) {
            _this->_impl_.player_name_.Set(from._internal_player_name(),
                _this->GetArenaForAllocation());
        }
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_room_id().empty()) {
            _this->_impl_.room_id_.Set(from._internal_room_id(),
                _this->GetArenaForAllocation());
        }
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        _this->_impl_.success_ = from._impl_.success_;
        // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_GAME)
    }

    inline void S_CREATE_GAME::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_name_){}
          , decltype(_impl_.room_id_){}
          , decltype(_impl_.player_){nullptr}
          , decltype(_impl_.success_){false}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    S_CREATE_GAME::~S_CREATE_GAME() {
        // @@protoc_insertion_point(destructor:Protocol.S_CREATE_GAME)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_CREATE_GAME::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.player_name_.Destroy();
        _impl_.room_id_.Destroy();
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void S_CREATE_GAME::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_CREATE_GAME::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_GAME)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.player_name_.ClearToEmpty();
        _impl_.room_id_.ClearToEmpty();
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _impl_.success_ = false;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_CREATE_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // bool success = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // .Protocol.ObjectInfo player = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // string player_name = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_player_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CREATE_GAME.player_name"));
                }
                else
                    goto handle_unusual;
                continue;
                // string room_id = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                    auto str = _internal_mutable_room_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CREATE_GAME.room_id"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_CREATE_GAME::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_GAME)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool success = 1;
        if (this->_internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
        }

        // .Protocol.ObjectInfo player = 2;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        // string player_name = 3;
        if (!this->_internal_player_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_CREATE_GAME.player_name");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_player_name(), target);
        }

        // string room_id = 4;
        if (!this->_internal_room_id().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_CREATE_GAME.room_id");
            target = stream->WriteStringMaybeAliased(
                4, this->_internal_room_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_GAME)
        return target;
    }

    size_t S_CREATE_GAME::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_GAME)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string player_name = 3;
        if (!this->_internal_player_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_player_name());
        }

        // string room_id = 4;
        if (!this->_internal_room_id().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_room_id());
        }

        // .Protocol.ObjectInfo player = 2;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        // bool success = 1;
        if (this->_internal_success() != 0) {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CREATE_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_CREATE_GAME::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_CREATE_GAME::GetClassData() const { return &_class_data_; }


    void S_CREATE_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_CREATE_GAME*>(&to_msg);
        auto& from = static_cast<const S_CREATE_GAME&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_GAME)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_player_name().empty()) {
            _this->_internal_set_player_name(from._internal_player_name());
        }
        if (!from._internal_room_id().empty()) {
            _this->_internal_set_room_id(from._internal_room_id());
        }
        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        if (from._internal_success() != 0) {
            _this->_internal_set_success(from._internal_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_CREATE_GAME::CopyFrom(const S_CREATE_GAME& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_GAME)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_CREATE_GAME::IsInitialized() const {
        return true;
    }

    void S_CREATE_GAME::InternalSwap(S_CREATE_GAME* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.player_name_, lhs_arena,
            &other->_impl_.player_name_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.room_id_, lhs_arena,
            &other->_impl_.room_id_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(S_CREATE_GAME, _impl_.success_)
            + sizeof(S_CREATE_GAME::_impl_.success_)
            - PROTOBUF_FIELD_OFFSET(S_CREATE_GAME, _impl_.player_)>(
                reinterpret_cast<char*>(&_impl_.player_),
                reinterpret_cast<char*>(&other->_impl_.player_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[2]);
    }

    // ===================================================================

    class C_CREATE_GAME::_Internal {
    public:
    };

    C_CREATE_GAME::C_CREATE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_GAME)
    }
    C_CREATE_GAME::C_CREATE_GAME(const C_CREATE_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_CREATE_GAME* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty()) {
            _this->_impl_.name_.Set(from._internal_name(),
                _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_GAME)
    }

    inline void C_CREATE_GAME::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    C_CREATE_GAME::~C_CREATE_GAME() {
        // @@protoc_insertion_point(destructor:Protocol.C_CREATE_GAME)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_CREATE_GAME::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.name_.Destroy();
    }

    void C_CREATE_GAME::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_CREATE_GAME::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_GAME)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.name_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_CREATE_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // string name = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATE_GAME.name"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_CREATE_GAME::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_GAME)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string name = 1;
        if (!this->_internal_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.C_CREATE_GAME.name");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_name(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_GAME)
        return target;
    }

    size_t C_CREATE_GAME::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_GAME)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string name = 1;
        if (!this->_internal_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_name());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATE_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_CREATE_GAME::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_CREATE_GAME::GetClassData() const { return &_class_data_; }


    void C_CREATE_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_CREATE_GAME*>(&to_msg);
        auto& from = static_cast<const C_CREATE_GAME&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_GAME)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_name().empty()) {
            _this->_internal_set_name(from._internal_name());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_CREATE_GAME::CopyFrom(const C_CREATE_GAME& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_GAME)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_CREATE_GAME::IsInitialized() const {
        return true;
    }

    void C_CREATE_GAME::InternalSwap(C_CREATE_GAME* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[3]);
    }

    // ===================================================================

    class S_GAME_START::_Internal {
    public:
    };

    void S_GAME_START::clear_player() {
        _impl_.player_.Clear();
    }
    S_GAME_START::S_GAME_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_GAME_START)
    }
    S_GAME_START::S_GAME_START(const S_GAME_START& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_GAME_START* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){from._impl_.player_}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.S_GAME_START)
    }

    inline void S_GAME_START::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){arena}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_GAME_START::~S_GAME_START() {
        // @@protoc_insertion_point(destructor:Protocol.S_GAME_START)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_GAME_START::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.player_.~RepeatedPtrField();
    }

    void S_GAME_START::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_GAME_START::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_GAME_START)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.player_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_GAME_START::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // repeated .Protocol.MoveInfo player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_player(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_GAME_START::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_GAME_START)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .Protocol.MoveInfo player = 1;
        for (unsigned i = 0,
            n = static_cast<unsigned>(this->_internal_player_size()); i < n; i++) {
            const auto& repfield = this->_internal_player(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_GAME_START)
        return target;
    }

    size_t S_GAME_START::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_GAME_START)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .Protocol.MoveInfo player = 1;
        total_size += 1UL * this->_internal_player_size();
        for (const auto& msg : this->_impl_.player_) {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GAME_START::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_GAME_START::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_GAME_START::GetClassData() const { return &_class_data_; }


    void S_GAME_START::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_GAME_START*>(&to_msg);
        auto& from = static_cast<const S_GAME_START&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_GAME_START)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.player_.MergeFrom(from._impl_.player_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_GAME_START::CopyFrom(const S_GAME_START& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_GAME_START)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_GAME_START::IsInitialized() const {
        return true;
    }

    void S_GAME_START::InternalSwap(S_GAME_START* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.player_.InternalSwap(&other->_impl_.player_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_GAME_START::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[4]);
    }

    // ===================================================================

    class C_GAME_START::_Internal {
    public:
        static const ::Protocol::ObjectInfo& host_player(const C_GAME_START* msg);
    };

    const ::Protocol::ObjectInfo&
        C_GAME_START::_Internal::host_player(const C_GAME_START* msg) {
        return *msg->_impl_.host_player_;
    }
    void C_GAME_START::clear_host_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.host_player_ != nullptr) {
            delete _impl_.host_player_;
        }
        _impl_.host_player_ = nullptr;
    }
    C_GAME_START::C_GAME_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_GAME_START)
    }
    C_GAME_START::C_GAME_START(const C_GAME_START& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_GAME_START* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.host_player_){nullptr}
          , decltype(_impl_.stage_number_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_host_player()) {
            _this->_impl_.host_player_ = new ::Protocol::ObjectInfo(*from._impl_.host_player_);
        }
        _this->_impl_.stage_number_ = from._impl_.stage_number_;
        // @@protoc_insertion_point(copy_constructor:Protocol.C_GAME_START)
    }

    inline void C_GAME_START::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.host_player_){nullptr}
          , decltype(_impl_.stage_number_){0}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    C_GAME_START::~C_GAME_START() {
        // @@protoc_insertion_point(destructor:Protocol.C_GAME_START)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_GAME_START::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (this != internal_default_instance()) delete _impl_.host_player_;
    }

    void C_GAME_START::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_GAME_START::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_GAME_START)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        if (GetArenaForAllocation() == nullptr && _impl_.host_player_ != nullptr) {
            delete _impl_.host_player_;
        }
        _impl_.host_player_ = nullptr;
        _impl_.stage_number_ = 0;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_GAME_START::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ObjectInfo host_player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_host_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // .Protocol.StageNumber stage_number = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_stage_number(static_cast<::Protocol::StageNumber>(val));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_GAME_START::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_GAME_START)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ObjectInfo host_player = 1;
        if (this->_internal_has_host_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::host_player(this),
                    _Internal::host_player(this).GetCachedSize(), target, stream);
        }

        // .Protocol.StageNumber stage_number = 2;
        if (this->_internal_stage_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this->_internal_stage_number(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_GAME_START)
        return target;
    }

    size_t C_GAME_START::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_GAME_START)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .Protocol.ObjectInfo host_player = 1;
        if (this->_internal_has_host_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.host_player_);
        }

        // .Protocol.StageNumber stage_number = 2;
        if (this->_internal_stage_number() != 0) {
            total_size += 1 +
                ::_pbi::WireFormatLite::EnumSize(this->_internal_stage_number());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GAME_START::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_GAME_START::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_GAME_START::GetClassData() const { return &_class_data_; }


    void C_GAME_START::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_GAME_START*>(&to_msg);
        auto& from = static_cast<const C_GAME_START&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_GAME_START)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_has_host_player()) {
            _this->_internal_mutable_host_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_host_player());
        }
        if (from._internal_stage_number() != 0) {
            _this->_internal_set_stage_number(from._internal_stage_number());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_GAME_START::CopyFrom(const C_GAME_START& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_GAME_START)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_GAME_START::IsInitialized() const {
        return true;
    }

    void C_GAME_START::InternalSwap(C_GAME_START* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(C_GAME_START, _impl_.stage_number_)
            + sizeof(C_GAME_START::_impl_.stage_number_)
            - PROTOBUF_FIELD_OFFSET(C_GAME_START, _impl_.host_player_)>(
                reinterpret_cast<char*>(&_impl_.host_player_),
                reinterpret_cast<char*>(&other->_impl_.host_player_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_GAME_START::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[5]);
    }

    // ===================================================================

    class S_LEAVE_GAME::_Internal {
    public:
    };

    S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
        // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
    }
    S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
        S_LEAVE_GAME* const _this = this; (void)_this;
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
    }





    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_LEAVE_GAME::GetClassData() const { return &_class_data_; }







    ::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[6]);
    }

    // ===================================================================

    class C_LEAVE_GAME::_Internal {
    public:
    };

    C_LEAVE_GAME::C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
        // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_GAME)
    }
    C_LEAVE_GAME::C_LEAVE_GAME(const C_LEAVE_GAME& from)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
        C_LEAVE_GAME* const _this = this; (void)_this;
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_GAME)
    }





    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_GAME::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_LEAVE_GAME::GetClassData() const { return &_class_data_; }







    ::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_GAME::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[7]);
    }

    // ===================================================================

    class S_GAME_END::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const S_GAME_END* msg);
    };

    const ::Protocol::ObjectInfo&
        S_GAME_END::_Internal::player(const S_GAME_END* msg) {
        return *msg->_impl_.player_;
    }
    void S_GAME_END::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    S_GAME_END::S_GAME_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_GAME_END)
    }
    S_GAME_END::S_GAME_END(const S_GAME_END& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_GAME_END* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.S_GAME_END)
    }

    inline void S_GAME_END::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_GAME_END::~S_GAME_END() {
        // @@protoc_insertion_point(destructor:Protocol.S_GAME_END)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_GAME_END::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void S_GAME_END::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_GAME_END::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_GAME_END)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_GAME_END::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ObjectInfo player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_GAME_END::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_GAME_END)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_GAME_END)
        return target;
    }

    size_t S_GAME_END::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_GAME_END)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GAME_END::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_GAME_END::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_GAME_END::GetClassData() const { return &_class_data_; }


    void S_GAME_END::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_GAME_END*>(&to_msg);
        auto& from = static_cast<const S_GAME_END&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_GAME_END)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_GAME_END::CopyFrom(const S_GAME_END& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_GAME_END)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_GAME_END::IsInitialized() const {
        return true;
    }

    void S_GAME_END::InternalSwap(S_GAME_END* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.player_, other->_impl_.player_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_GAME_END::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[8]);
    }

    // ===================================================================

    class C_GAME_END::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const C_GAME_END* msg);
    };

    const ::Protocol::ObjectInfo&
        C_GAME_END::_Internal::player(const C_GAME_END* msg) {
        return *msg->_impl_.player_;
    }
    void C_GAME_END::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    C_GAME_END::C_GAME_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_GAME_END)
    }
    C_GAME_END::C_GAME_END(const C_GAME_END& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_GAME_END* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.C_GAME_END)
    }

    inline void C_GAME_END::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    C_GAME_END::~C_GAME_END() {
        // @@protoc_insertion_point(destructor:Protocol.C_GAME_END)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_GAME_END::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void C_GAME_END::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_GAME_END::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_GAME_END)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_GAME_END::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ObjectInfo player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_GAME_END::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_GAME_END)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_GAME_END)
        return target;
    }

    size_t C_GAME_END::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_GAME_END)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GAME_END::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_GAME_END::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_GAME_END::GetClassData() const { return &_class_data_; }


    void C_GAME_END::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_GAME_END*>(&to_msg);
        auto& from = static_cast<const C_GAME_END&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_GAME_END)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_GAME_END::CopyFrom(const C_GAME_END& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_GAME_END)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_GAME_END::IsInitialized() const {
        return true;
    }

    void C_GAME_END::InternalSwap(C_GAME_END* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.player_, other->_impl_.player_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_GAME_END::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[9]);
    }

    // ===================================================================

    class S_SPAWN::_Internal {
    public:
    };

    void S_SPAWN::clear_players() {
        _impl_.players_.Clear();
    }
    S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
    }
    S_SPAWN::S_SPAWN(const S_SPAWN& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_SPAWN* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.players_){from._impl_.players_}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
    }

    inline void S_SPAWN::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.players_){arena}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_SPAWN::~S_SPAWN() {
        // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_SPAWN::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.players_.~RepeatedPtrField();
    }

    void S_SPAWN::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_SPAWN::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.players_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // repeated .Protocol.ObjectInfo players = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_players(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_SPAWN::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .Protocol.ObjectInfo players = 1;
        for (unsigned i = 0,
            n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
            const auto& repfield = this->_internal_players(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
        return target;
    }

    size_t S_SPAWN::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .Protocol.ObjectInfo players = 1;
        total_size += 1UL * this->_internal_players_size();
        for (const auto& msg : this->_impl_.players_) {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_SPAWN::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_SPAWN::GetClassData() const { return &_class_data_; }


    void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_SPAWN*>(&to_msg);
        auto& from = static_cast<const S_SPAWN&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.players_.MergeFrom(from._impl_.players_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_SPAWN::CopyFrom(const S_SPAWN& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_SPAWN::IsInitialized() const {
        return true;
    }

    void S_SPAWN::InternalSwap(S_SPAWN* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.players_.InternalSwap(&other->_impl_.players_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[10]);
    }

    // ===================================================================

    class C_SPAWN::_Internal {
    public:
    };

    C_SPAWN::C_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
        // @@protoc_insertion_point(arena_constructor:Protocol.C_SPAWN)
    }
    C_SPAWN::C_SPAWN(const C_SPAWN& from)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
        C_SPAWN* const _this = this; (void)_this;
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.C_SPAWN)
    }





    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SPAWN::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_SPAWN::GetClassData() const { return &_class_data_; }







    ::PROTOBUF_NAMESPACE_ID::Metadata C_SPAWN::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[11]);
    }

    // ===================================================================

    class S_DESPAWN::_Internal {
    public:
    };

    S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
    }
    S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_DESPAWN* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.object_ids_){from._impl_.object_ids_}
          , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
    }

    inline void S_DESPAWN::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.object_ids_){arena}
          , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_DESPAWN::~S_DESPAWN() {
        // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_DESPAWN::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.object_ids_.~RepeatedField();
    }

    void S_DESPAWN::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_DESPAWN::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.object_ids_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // repeated uint64 object_ids = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
                    CHK_(ptr);
                }
                else if (static_cast<uint8_t>(tag) == 8) {
                    _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_DESPAWN::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated uint64 object_ids = 1;
        {
            int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0) {
                target = stream->WriteUInt64Packed(
                    1, _internal_object_ids(), byte_size, target);
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
        return target;
    }

    size_t S_DESPAWN::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated uint64 object_ids = 1;
        {
            size_t data_size = ::_pbi::WireFormatLite::
                UInt64Size(this->_impl_.object_ids_);
            if (data_size > 0) {
                total_size += 1 +
                    ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._object_ids_cached_byte_size_.store(cached_size,
                std::memory_order_relaxed);
            total_size += data_size;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_DESPAWN::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_DESPAWN::GetClassData() const { return &_class_data_; }


    void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_DESPAWN*>(&to_msg);
        auto& from = static_cast<const S_DESPAWN&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_DESPAWN::IsInitialized() const {
        return true;
    }

    void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[12]);
    }

    // ===================================================================

    class C_DESPAWN::_Internal {
    public:
    };

    C_DESPAWN::C_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
        // @@protoc_insertion_point(arena_constructor:Protocol.C_DESPAWN)
    }
    C_DESPAWN::C_DESPAWN(const C_DESPAWN& from)
        : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
        C_DESPAWN* const _this = this; (void)_this;
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:Protocol.C_DESPAWN)
    }





    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DESPAWN::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_DESPAWN::GetClassData() const { return &_class_data_; }







    ::PROTOBUF_NAMESPACE_ID::Metadata C_DESPAWN::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[13]);
    }

    // ===================================================================

    class S_MOVE::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const S_MOVE* msg);
    };

    const ::Protocol::ObjectInfo&
        S_MOVE::_Internal::player(const S_MOVE* msg) {
        return *msg->_impl_.player_;
    }
    void S_MOVE::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
    }
    S_MOVE::S_MOVE(const S_MOVE& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_MOVE* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
    }

    inline void S_MOVE::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_MOVE::~S_MOVE() {
        // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_MOVE::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void S_MOVE::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_MOVE::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ObjectInfo player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_MOVE::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
        return target;
    }

    size_t S_MOVE::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_MOVE::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_MOVE::GetClassData() const { return &_class_data_; }


    void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_MOVE*>(&to_msg);
        auto& from = static_cast<const S_MOVE&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_MOVE::CopyFrom(const S_MOVE& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_MOVE::IsInitialized() const {
        return true;
    }

    void S_MOVE::InternalSwap(S_MOVE* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.player_, other->_impl_.player_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[14]);
    }

    // ===================================================================

    class C_MOVE::_Internal {
    public:
        static const ::Protocol::ObjectInfo& player(const C_MOVE* msg);
    };

    const ::Protocol::ObjectInfo&
        C_MOVE::_Internal::player(const C_MOVE* msg) {
        return *msg->_impl_.player_;
    }
    void C_MOVE::clear_player() {
        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
    }
    C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
    }
    C_MOVE::C_MOVE(const C_MOVE& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_MOVE* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_player()) {
            _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
    }

    inline void C_MOVE::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_){nullptr}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    C_MOVE::~C_MOVE() {
        // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_MOVE::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (this != internal_default_instance()) delete _impl_.player_;
    }

    void C_MOVE::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_MOVE::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
            delete _impl_.player_;
        }
        _impl_.player_ = nullptr;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ObjectInfo player = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_MOVE::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::player(this),
                    _Internal::player(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
        return target;
    }

    size_t C_MOVE::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .Protocol.ObjectInfo player = 1;
        if (this->_internal_has_player()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.player_);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_MOVE::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_MOVE::GetClassData() const { return &_class_data_; }


    void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_MOVE*>(&to_msg);
        auto& from = static_cast<const C_MOVE&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_has_player()) {
            _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
                from._internal_player());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_MOVE::CopyFrom(const C_MOVE& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_MOVE::IsInitialized() const {
        return true;
    }

    void C_MOVE::InternalSwap(C_MOVE* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.player_, other->_impl_.player_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[15]);
    }

    // ===================================================================

    class S_PLAYER_ACTION::_Internal {
    public:
    };

    S_PLAYER_ACTION::S_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ACTION)
    }
    S_PLAYER_ACTION::S_PLAYER_ACTION(const S_PLAYER_ACTION& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_PLAYER_ACTION* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}
          , decltype(_impl_.object_id_){}
          , decltype(_impl_.action_type_){}
          , decltype(_impl_.is_right_on_){}
          , decltype(_impl_.is_open_door_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
            static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_open_door_) -
                reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.is_open_door_));
        // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ACTION)
    }

    inline void S_PLAYER_ACTION::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){uint64_t{0u}}
          , decltype(_impl_.object_id_){uint64_t{0u}}
          , decltype(_impl_.action_type_){0}
          , decltype(_impl_.is_right_on_){false}
          , decltype(_impl_.is_open_door_){false}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_PLAYER_ACTION::~S_PLAYER_ACTION() {
        // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ACTION)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_PLAYER_ACTION::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void S_PLAYER_ACTION::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_PLAYER_ACTION::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ACTION)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&_impl_.is_open_door_) -
            reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.is_open_door_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_PLAYER_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ActionType action_type = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_action_type(static_cast<::Protocol::ActionType>(val));
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 player_id = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 object_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // bool is_right_on = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    _impl_.is_right_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // bool is_open_door = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
                    _impl_.is_open_door_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_PLAYER_ACTION::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ACTION)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ActionType action_type = 1;
        if (this->_internal_action_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_action_type(), target);
        }

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_id(), target);
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
        }

        // bool is_right_on = 4;
        if (this->_internal_is_right_on() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_right_on(), target);
        }

        // bool is_open_door = 5;
        if (this->_internal_is_open_door() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_open_door(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ACTION)
        return target;
    }

    size_t S_PLAYER_ACTION::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ACTION)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
        }

        // .Protocol.ActionType action_type = 1;
        if (this->_internal_action_type() != 0) {
            total_size += 1 +
                ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
        }

        // bool is_right_on = 4;
        if (this->_internal_is_right_on() != 0) {
            total_size += 1 + 1;
        }

        // bool is_open_door = 5;
        if (this->_internal_is_open_door() != 0) {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_ACTION::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_PLAYER_ACTION::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_PLAYER_ACTION::GetClassData() const { return &_class_data_; }


    void S_PLAYER_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_PLAYER_ACTION*>(&to_msg);
        auto& from = static_cast<const S_PLAYER_ACTION&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ACTION)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0) {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_object_id() != 0) {
            _this->_internal_set_object_id(from._internal_object_id());
        }
        if (from._internal_action_type() != 0) {
            _this->_internal_set_action_type(from._internal_action_type());
        }
        if (from._internal_is_right_on() != 0) {
            _this->_internal_set_is_right_on(from._internal_is_right_on());
        }
        if (from._internal_is_open_door() != 0) {
            _this->_internal_set_is_open_door(from._internal_is_open_door());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_PLAYER_ACTION::CopyFrom(const S_PLAYER_ACTION& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ACTION)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_PLAYER_ACTION::IsInitialized() const {
        return true;
    }

    void S_PLAYER_ACTION::InternalSwap(S_PLAYER_ACTION* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION, _impl_.is_open_door_)
            + sizeof(S_PLAYER_ACTION::_impl_.is_open_door_)
            - PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION, _impl_.player_id_)>(
                reinterpret_cast<char*>(&_impl_.player_id_),
                reinterpret_cast<char*>(&other->_impl_.player_id_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ACTION::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[16]);
    }

    // ===================================================================

    class C_PLAYER_ACTION::_Internal {
    public:
    };

    C_PLAYER_ACTION::C_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ACTION)
    }
    C_PLAYER_ACTION::C_PLAYER_ACTION(const C_PLAYER_ACTION& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_PLAYER_ACTION* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}
          , decltype(_impl_.object_id_){}
          , decltype(_impl_.action_type_){}
          , decltype(_impl_.is_right_on_){}
          , decltype(_impl_.is_open_door_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
            static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_open_door_) -
                reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.is_open_door_));
        // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ACTION)
    }

    inline void C_PLAYER_ACTION::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){uint64_t{0u}}
          , decltype(_impl_.object_id_){uint64_t{0u}}
          , decltype(_impl_.action_type_){0}
          , decltype(_impl_.is_right_on_){false}
          , decltype(_impl_.is_open_door_){false}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    C_PLAYER_ACTION::~C_PLAYER_ACTION() {
        // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ACTION)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_PLAYER_ACTION::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void C_PLAYER_ACTION::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_PLAYER_ACTION::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ACTION)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&_impl_.is_open_door_) -
            reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.is_open_door_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_PLAYER_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ActionType action_type = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_action_type(static_cast<::Protocol::ActionType>(val));
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 player_id = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 object_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // bool is_right_on = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    _impl_.is_right_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // bool is_open_door = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
                    _impl_.is_open_door_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_PLAYER_ACTION::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ACTION)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ActionType action_type = 1;
        if (this->_internal_action_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_action_type(), target);
        }

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_id(), target);
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
        }

        // bool is_right_on = 4;
        if (this->_internal_is_right_on() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_right_on(), target);
        }

        // bool is_open_door = 5;
        if (this->_internal_is_open_door() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_open_door(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ACTION)
        return target;
    }

    size_t C_PLAYER_ACTION::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ACTION)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
        }

        // .Protocol.ActionType action_type = 1;
        if (this->_internal_action_type() != 0) {
            total_size += 1 +
                ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
        }

        // bool is_right_on = 4;
        if (this->_internal_is_right_on() != 0) {
            total_size += 1 + 1;
        }

        // bool is_open_door = 5;
        if (this->_internal_is_open_door() != 0) {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_ACTION::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_PLAYER_ACTION::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_PLAYER_ACTION::GetClassData() const { return &_class_data_; }


    void C_PLAYER_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_PLAYER_ACTION*>(&to_msg);
        auto& from = static_cast<const C_PLAYER_ACTION&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ACTION)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0) {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_object_id() != 0) {
            _this->_internal_set_object_id(from._internal_object_id());
        }
        if (from._internal_action_type() != 0) {
            _this->_internal_set_action_type(from._internal_action_type());
        }
        if (from._internal_is_right_on() != 0) {
            _this->_internal_set_is_right_on(from._internal_is_right_on());
        }
        if (from._internal_is_open_door() != 0) {
            _this->_internal_set_is_open_door(from._internal_is_open_door());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_PLAYER_ACTION::CopyFrom(const C_PLAYER_ACTION& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ACTION)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_PLAYER_ACTION::IsInitialized() const {
        return true;
    }

    void C_PLAYER_ACTION::InternalSwap(C_PLAYER_ACTION* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION, _impl_.is_open_door_)
            + sizeof(C_PLAYER_ACTION::_impl_.is_open_door_)
            - PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION, _impl_.player_id_)>(
                reinterpret_cast<char*>(&_impl_.player_id_),
                reinterpret_cast<char*>(&other->_impl_.player_id_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ACTION::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[17]);
    }

    // ===================================================================

    class S_CHAT::_Internal {
    public:
    };

    S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
    }
    S_CHAT::S_CHAT(const S_CHAT& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_CHAT* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}
          , decltype(_impl_.msg_){}
          , decltype(_impl_.playerid_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty()) {
            _this->_impl_.name_.Set(from._internal_name(),
                _this->GetArenaForAllocation());
        }
        _impl_.msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_msg().empty()) {
            _this->_impl_.msg_.Set(from._internal_msg(),
                _this->GetArenaForAllocation());
        }
        _this->_impl_.playerid_ = from._impl_.playerid_;
        // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
    }

    inline void S_CHAT::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}
          , decltype(_impl_.msg_){}
          , decltype(_impl_.playerid_){uint64_t{0u}}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    S_CHAT::~S_CHAT() {
        // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_CHAT::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.name_.Destroy();
        _impl_.msg_.Destroy();
    }

    void S_CHAT::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_CHAT::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.name_.ClearToEmpty();
        _impl_.msg_.ClearToEmpty();
        _impl_.playerid_ = uint64_t{ 0u };
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // uint64 playerId = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.name"));
                }
                else
                    goto handle_unusual;
                continue;
                // string msg = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_msg();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_CHAT::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // uint64 playerId = 1;
        if (this->_internal_playerid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
        }

        // string name = 2;
        if (!this->_internal_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_CHAT.name");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_name(), target);
        }

        // string msg = 3;
        if (!this->_internal_msg().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.S_CHAT.msg");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_msg(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
        return target;
    }

    size_t S_CHAT::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string name = 2;
        if (!this->_internal_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_name());
        }

        // string msg = 3;
        if (!this->_internal_msg().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_msg());
        }

        // uint64 playerId = 1;
        if (this->_internal_playerid() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_CHAT::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_CHAT::GetClassData() const { return &_class_data_; }


    void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_CHAT*>(&to_msg);
        auto& from = static_cast<const S_CHAT&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_name().empty()) {
            _this->_internal_set_name(from._internal_name());
        }
        if (!from._internal_msg().empty()) {
            _this->_internal_set_msg(from._internal_msg());
        }
        if (from._internal_playerid() != 0) {
            _this->_internal_set_playerid(from._internal_playerid());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_CHAT::CopyFrom(const S_CHAT& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_CHAT::IsInitialized() const {
        return true;
    }

    void S_CHAT::InternalSwap(S_CHAT* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.msg_, lhs_arena,
            &other->_impl_.msg_, rhs_arena
        );
        swap(_impl_.playerid_, other->_impl_.playerid_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[18]);
    }

    // ===================================================================

    class C_CHAT::_Internal {
    public:
    };

    C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
    }
    C_CHAT::C_CHAT(const C_CHAT& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_CHAT* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.msg_){}
          , decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_msg().empty()) {
            _this->_impl_.msg_.Set(from._internal_msg(),
                _this->GetArenaForAllocation());
        }
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty()) {
            _this->_impl_.name_.Set(from._internal_name(),
                _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
    }

    inline void C_CHAT::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.msg_){}
          , decltype(_impl_.name_){}
          , /*decltype(_impl_._cached_size_)*/{}
        };
        _impl_.msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    C_CHAT::~C_CHAT() {
        // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_CHAT::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.msg_.Destroy();
        _impl_.name_.Destroy();
    }

    void C_CHAT::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_CHAT::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.msg_.ClearToEmpty();
        _impl_.name_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // string msg = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    auto str = _internal_mutable_msg();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
                }
                else
                    goto handle_unusual;
                continue;
                // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.name"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_CHAT::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string msg = 1;
        if (!this->_internal_msg().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.C_CHAT.msg");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_msg(), target);
        }

        // string name = 2;
        if (!this->_internal_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "Protocol.C_CHAT.name");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_name(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
        return target;
    }

    size_t C_CHAT::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string msg = 1;
        if (!this->_internal_msg().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_msg());
        }

        // string name = 2;
        if (!this->_internal_name().empty()) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_name());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_CHAT::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_CHAT::GetClassData() const { return &_class_data_; }


    void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_CHAT*>(&to_msg);
        auto& from = static_cast<const C_CHAT&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_msg().empty()) {
            _this->_internal_set_msg(from._internal_msg());
        }
        if (!from._internal_name().empty()) {
            _this->_internal_set_name(from._internal_name());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_CHAT::CopyFrom(const C_CHAT& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_CHAT::IsInitialized() const {
        return true;
    }

    void C_CHAT::InternalSwap(C_CHAT* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.msg_, lhs_arena,
            &other->_impl_.msg_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[19]);
    }

    // ===================================================================

    class S_PICK_UP_ITEM::_Internal {
    public:
    };

    S_PICK_UP_ITEM::S_PICK_UP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.S_PICK_UP_ITEM)
    }
    S_PICK_UP_ITEM::S_PICK_UP_ITEM(const S_PICK_UP_ITEM& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        S_PICK_UP_ITEM* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}
          , decltype(_impl_.item_type_){}
          , decltype(_impl_.is_on_){}
          , decltype(_impl_.object_id_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
            static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_id_) -
                reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.object_id_));
        // @@protoc_insertion_point(copy_constructor:Protocol.S_PICK_UP_ITEM)
    }

    inline void S_PICK_UP_ITEM::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){uint64_t{0u}}
          , decltype(_impl_.item_type_){0}
          , decltype(_impl_.is_on_){false}
          , decltype(_impl_.object_id_){uint64_t{0u}}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    S_PICK_UP_ITEM::~S_PICK_UP_ITEM() {
        // @@protoc_insertion_point(destructor:Protocol.S_PICK_UP_ITEM)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void S_PICK_UP_ITEM::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void S_PICK_UP_ITEM::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void S_PICK_UP_ITEM::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.S_PICK_UP_ITEM)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&_impl_.object_id_) -
            reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.object_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* S_PICK_UP_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ClickedItemType item_type = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_item_type(static_cast<::Protocol::ClickedItemType>(val));
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 player_id = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 object_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // bool is_on = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    _impl_.is_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* S_PICK_UP_ITEM::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PICK_UP_ITEM)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ClickedItemType item_type = 1;
        if (this->_internal_item_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_item_type(), target);
        }

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_id(), target);
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
        }

        // bool is_on = 4;
        if (this->_internal_is_on() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_on(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PICK_UP_ITEM)
        return target;
    }

    size_t S_PICK_UP_ITEM::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.S_PICK_UP_ITEM)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
        }

        // .Protocol.ClickedItemType item_type = 1;
        if (this->_internal_item_type() != 0) {
            total_size += 1 +
                ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
        }

        // bool is_on = 4;
        if (this->_internal_is_on() != 0) {
            total_size += 1 + 1;
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PICK_UP_ITEM::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        S_PICK_UP_ITEM::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* S_PICK_UP_ITEM::GetClassData() const { return &_class_data_; }


    void S_PICK_UP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<S_PICK_UP_ITEM*>(&to_msg);
        auto& from = static_cast<const S_PICK_UP_ITEM&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PICK_UP_ITEM)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0) {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_item_type() != 0) {
            _this->_internal_set_item_type(from._internal_item_type());
        }
        if (from._internal_is_on() != 0) {
            _this->_internal_set_is_on(from._internal_is_on());
        }
        if (from._internal_object_id() != 0) {
            _this->_internal_set_object_id(from._internal_object_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void S_PICK_UP_ITEM::CopyFrom(const S_PICK_UP_ITEM& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PICK_UP_ITEM)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool S_PICK_UP_ITEM::IsInitialized() const {
        return true;
    }

    void S_PICK_UP_ITEM::InternalSwap(S_PICK_UP_ITEM* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(S_PICK_UP_ITEM, _impl_.object_id_)
            + sizeof(S_PICK_UP_ITEM::_impl_.object_id_)
            - PROTOBUF_FIELD_OFFSET(S_PICK_UP_ITEM, _impl_.player_id_)>(
                reinterpret_cast<char*>(&_impl_.player_id_),
                reinterpret_cast<char*>(&other->_impl_.player_id_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata S_PICK_UP_ITEM::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[20]);
    }

    // ===================================================================

    class C_PICK_UP_ITEM::_Internal {
    public:
    };

    C_PICK_UP_ITEM::C_PICK_UP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
        bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:Protocol.C_PICK_UP_ITEM)
    }
    C_PICK_UP_ITEM::C_PICK_UP_ITEM(const C_PICK_UP_ITEM& from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
        C_PICK_UP_ITEM* const _this = this; (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}
          , decltype(_impl_.object_id_){}
          , decltype(_impl_.item_type_){}
          , /*decltype(_impl_._cached_size_)*/{} };

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
            static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_type_) -
                reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.item_type_));
        // @@protoc_insertion_point(copy_constructor:Protocol.C_PICK_UP_ITEM)
    }

    inline void C_PICK_UP_ITEM::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned) {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){uint64_t{0u}}
          , decltype(_impl_.object_id_){uint64_t{0u}}
          , decltype(_impl_.item_type_){0}
          , /*decltype(_impl_._cached_size_)*/{}
        };
    }

    C_PICK_UP_ITEM::~C_PICK_UP_ITEM() {
        // @@protoc_insertion_point(destructor:Protocol.C_PICK_UP_ITEM)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void C_PICK_UP_ITEM::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void C_PICK_UP_ITEM::SetCachedSize(int size) const {
        _impl_._cached_size_.Set(size);
    }

    void C_PICK_UP_ITEM::Clear() {
        // @@protoc_insertion_point(message_clear_start:Protocol.C_PICK_UP_ITEM)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&_impl_.item_type_) -
            reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.item_type_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* C_PICK_UP_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // .Protocol.ClickedItemType item_type = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_item_type(static_cast<::Protocol::ClickedItemType>(val));
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 player_id = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // uint64 object_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* C_PICK_UP_ITEM::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PICK_UP_ITEM)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .Protocol.ClickedItemType item_type = 1;
        if (this->_internal_item_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_item_type(), target);
        }

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_id(), target);
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PICK_UP_ITEM)
        return target;
    }

    size_t C_PICK_UP_ITEM::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:Protocol.C_PICK_UP_ITEM)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // uint64 player_id = 2;
        if (this->_internal_player_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
        }

        // uint64 object_id = 3;
        if (this->_internal_object_id() != 0) {
            total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
        }

        // .Protocol.ClickedItemType item_type = 1;
        if (this->_internal_item_type() != 0) {
            total_size += 1 +
                ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PICK_UP_ITEM::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        C_PICK_UP_ITEM::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* C_PICK_UP_ITEM::GetClassData() const { return &_class_data_; }


    void C_PICK_UP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
        auto* const _this = static_cast<C_PICK_UP_ITEM*>(&to_msg);
        auto& from = static_cast<const C_PICK_UP_ITEM&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PICK_UP_ITEM)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0) {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_object_id() != 0) {
            _this->_internal_set_object_id(from._internal_object_id());
        }
        if (from._internal_item_type() != 0) {
            _this->_internal_set_item_type(from._internal_item_type());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void C_PICK_UP_ITEM::CopyFrom(const C_PICK_UP_ITEM& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PICK_UP_ITEM)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool C_PICK_UP_ITEM::IsInitialized() const {
        return true;
    }

    void C_PICK_UP_ITEM::InternalSwap(C_PICK_UP_ITEM* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(C_PICK_UP_ITEM, _impl_.item_type_)
            + sizeof(C_PICK_UP_ITEM::_impl_.item_type_)
            - PROTOBUF_FIELD_OFFSET(C_PICK_UP_ITEM, _impl_.player_id_)>(
                reinterpret_cast<char*>(&_impl_.player_id_),
                reinterpret_cast<char*>(&other->_impl_.player_id_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata C_PICK_UP_ITEM::GetMetadata() const {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
            file_level_metadata_Protocol_2eproto[21]);
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_CREATE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_CREATE_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_CREATE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_CREATE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_CREATE_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_CREATE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_GAME_START*
Arena::CreateMaybeMessage< ::Protocol::S_GAME_START >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_GAME_START >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_GAME_START*
Arena::CreateMaybeMessage< ::Protocol::C_GAME_START >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_GAME_START >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_GAME >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_GAME_END*
Arena::CreateMaybeMessage< ::Protocol::S_GAME_END >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_GAME_END >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_GAME_END*
Arena::CreateMaybeMessage< ::Protocol::C_GAME_END >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_GAME_END >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::C_SPAWN >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::C_DESPAWN >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_PLAYER_ACTION*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ACTION >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_PLAYER_ACTION*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ACTION >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::S_PICK_UP_ITEM*
Arena::CreateMaybeMessage< ::Protocol::S_PICK_UP_ITEM >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::S_PICK_UP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE::Protocol::C_PICK_UP_ITEM*
Arena::CreateMaybeMessage< ::Protocol::C_PICK_UP_ITEM >(Arena* arena) {
    return Arena::CreateMessageInternal< ::Protocol::C_PICK_UP_ITEM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
